//
//  ViewController.m
//  iOSCryptoExample
//
//  Created by Patrick Hogan on 1/15/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#import "Crypto.h"
#import "Exception.h"
#import "Global.h"

#import "ViewController.h"


@interface ViewController ()

+(void)generateRSAKeysExample:(NSString *)publicKeyTag privateKeyTag:(NSString *)privateKeyTag;
+(void)importRSAKeysExample:(NSString *)publicKeyTag privateKeyTag:(NSString *)privateKeyTag;

@end


@implementation ViewController


#pragma mark - View lifecycle
-(void)viewDidLoad
{
 [super viewDidLoad];
 
 NSString *publicKeyTag = [NSString stringWithFormat:@"%@.publicKey", [[NSBundle mainBundle] bundleIdentifier]];
 NSString *privateKeyTag = [NSString stringWithFormat:@"%@.privateKey", [[NSBundle mainBundle] bundleIdentifier]];
 
 // Generate your own keys and run through encryption/decryption cycle
 [[self class] generateRSAKeysExample:publicKeyTag privateKeyTag:privateKeyTag];
 
 // Import public key pair from strings (generated by openSSL in the command line)
 [[self class] importRSAKeysExample:publicKeyTag privateKeyTag:privateKeyTag];
 
 // Clean up keys
 [Crypto removeKey:publicKeyTag];
 [Crypto removeKey:privateKeyTag];
}


#pragma mark - Crypto example methods
+(void)generateRSAKeysExample:(NSString *)publicKeyTag privateKeyTag:(NSString *)privateKeyTag
{
 @try 
 {
  [Crypto generateKeyPairWithPublicTag:publicKeyTag privateTag:privateKeyTag];
  NSString *publicKey = [Crypto getX509FormattedPublicKey:publicKeyTag];
  NSString *privateKey = [Crypto getPEMFormattedPrivateKey:privateKeyTag];
  
  NSString *plainText = @"Can you decrypt this?";
  NSString *cipherText = [Crypto encryptRSA:plainText key:publicKey];
  NSString *recoveredText = [Crypto decryptRSA:cipherText key:privateKey];
  
  DLog(@"Plain Text:\n%@", plainText);
  DLog(@"Cipher Text:\n%@", cipherText);
  DLog(@"Recovered Text:\n%@", recoveredText);
 }
 @catch (NSException *exception) 
 {
  DLog(@"%@", [exception reason]);
 }
}


+(void)importRSAKeysExample:(NSString *)publicKeyTag privateKeyTag:(NSString *)privateKeyTag
{
 @try 
 {
  NSString *filePath = [[NSBundle mainBundle] pathForResource:@"publicKey" ofType:@"pem"];  
  
  NSError *error = nil;
  NSString *publicKey = [NSString stringWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:&error];
  
  if (error) [Exception raise:FAILURE function:__PRETTY_FUNCTION__ line:__LINE__ description:@"Could not read public key from file."];
  
  filePath = [[NSBundle mainBundle] pathForResource:@"privateKey" ofType:@"pem"];  
  NSString *privateKey = [NSString stringWithContentsOfFile:filePath encoding:NSUTF8StringEncoding error:&error];  

  if (error) [Exception raise:FAILURE function:__PRETTY_FUNCTION__ line:__LINE__ description:@"Could not read private key from file."];

  [Crypto setPublicKey:publicKey tag:publicKeyTag];
  [Crypto setPrivateKey:privateKey tag:privateKeyTag];
  
  NSString *plainText = @"Can you decrypt this?";
  NSString *cipherText = [Crypto encryptRSA:plainText key:publicKey];
  NSString *recoveredText = [Crypto decryptRSA:cipherText key:privateKey];
  
  DLog(@"Plain Text:\n%@", plainText);
  DLog(@"Cipher Text:\n%@", cipherText);
  DLog(@"Recovered Text:\n%@", recoveredText);
 }
 @catch (NSException *exception) 
 {
  DLog(@"%@", [exception reason]);
 }
}


@end
